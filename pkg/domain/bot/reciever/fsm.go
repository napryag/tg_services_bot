package reciever

import (
	"fmt"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ---------- FSM ----------

type State int

const (
	StateStart State = iota
	StateMain
	StateBookService
	StateBookMaster
	StateBookDate
	StateBookTime
	StateBookConfirm
	StateMy
	StateHelp
)

type BookingData struct {
	Service string
	Master  string
	Date    string // YYYY-MM-DD
	Time    string // HH:MM
}

type Session struct {
	State   State
	history []State
	Booking BookingData
}

func (s *Session) Go(to State) {
	s.history = append(s.history, s.State)
	s.State = to
}

func (s *Session) Back() {
	if n := len(s.history); n > 0 {
		s.State = s.history[n-1]
		s.history = s.history[:n-1]
	} else {
		s.State = StateMain
	}
}

func (s *Session) ResetFlow() {
	s.State = StateMain
	s.history = s.history[:0]
	s.Booking = BookingData{}
}

// ---------- Session store (in-memory, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ) ----------

type Store struct {
	mu sync.RWMutex
	m  map[int64]*Session
}

func NewStore() *Store {
	return &Store{m: make(map[int64]*Session)}
}

func (s *Store) Get(userID int64) *Session {
	s.mu.Lock()
	defer s.mu.Unlock()
	if sess, ok := s.m[userID]; ok {
		return sess
	}
	se := &Session{State: StateMain}
	s.m[userID] = se
	return se
}

// ---------- Callback keys ----------

const (
	CbStart = "start"
	CbMain  = "main"
	CbBook  = "book"
	CbMy    = "my"
	CbHelp  = "help"
	CbBack  = "back"
	CbOk    = "confirm"

	PSvc = "svc:" // svc:haircut
	PM   = "m:"   // m:john
	PD   = "d:"   // d:2025-08-20
	PT   = "t:"   // t:10:30
)

func Is(k, prefix string) (string, bool) {
	if strings.HasPrefix(k, prefix) {
		return strings.TrimPrefix(k, prefix), true
	}
	return "", false
}

// ---------- UI builders ----------
func StartMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ù–ê–ß–ê–¢–¨", CbStart)),
	)
}

func MainMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üíà –ó–∞–ø–∏—Å—å", CbBook)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", CbMy)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", CbHelp)),
	)
}

func ServiceMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°—Ç—Ä–∏–∂–∫–∞", PSvc+"haircut"),
			tgbotapi.NewInlineKeyboardButtonData("–ë—Ä–∏—Ç—å—ë", PSvc+"shave"),
		),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
	)
}

func MastersMenu() tgbotapi.InlineKeyboardMarkup {
	// –∑–∞–≥–ª—É—à–∫–∞: –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ê–Ω–¥—Ä–µ–π", PM+"andrey"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–∞—Ä–∏—è", PM+"maria"),
		),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
	)
}

func DateMenu() tgbotapi.InlineKeyboardMarkup {
	now := time.Now()
	d1 := now.AddDate(0, 0, 0).Format("2006-01-02")
	d2 := now.AddDate(0, 0, 1).Format("2006-01-02")
	d3 := now.AddDate(0, 0, 2).Format("2006-01-02")
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(HumanDate(d1), PD+d1),
			tgbotapi.NewInlineKeyboardButtonData(HumanDate(d2), PD+d2),
			tgbotapi.NewInlineKeyboardButtonData(HumanDate(d3), PD+d3),
		),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
	)
}

func TimeMenu() tgbotapi.InlineKeyboardMarkup {
	// –∑–∞–≥–ª—É—à–∫–∞; –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
	slots := []string{"10:00", "12:00", "14:00", "16:00"}
	row := make([]tgbotapi.InlineKeyboardButton, 0, len(slots))
	for _, t := range slots {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(t, PT+t))
	}
	return tgbotapi.NewInlineKeyboardMarkup(
		row,
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
	)
}

func ConfirmMenu() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", CbOk)),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
	)
}

func HumanDate(iso string) string {
	t, _ := time.Parse("2006-01-02", iso)
	return t.Format("02.01 (Mon)")
}

// ---------- Rendering –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é ----------

func RenderText(sess *Session) string {
	switch sess.State {
	case StateMain:
		return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	case StateBookService:
		return "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
	case StateBookMaster:
		return "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
	case StateBookDate:
		return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
	case StateBookTime:
		return "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
	case StateBookConfirm:
		return fmt.Sprintf(
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–∏—Å—å:\n–£—Å–ª—É–≥–∞: %s\n–ú–∞—Å—Ç–µ—Ä: %s\n–î–∞—Ç–∞: %s\n–í—Ä–µ–º—è: %s",
			Title(sess.Booking.Service), Title(sess.Booking.Master),
			HumanDate(sess.Booking.Date), sess.Booking.Time,
		)
	case StateMy:
		return "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞):\n‚Äî 21.08 14:00, –°—Ç—Ä–∏–∂–∫–∞, –ê–Ω–¥—Ä–µ–π"
	case StateHelp:
		return "–ü–æ–º–æ—â—å (–∑–∞–≥–ª—É—à–∫–∞):\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å—å¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è."
	default:
		return "–ú–µ–Ω—é"
	}
}

func RenderKeyboard(sess *Session) tgbotapi.InlineKeyboardMarkup {
	switch sess.State {
	case StateStart:
		return StartMenu()
	case StateMain:
		return MainMenu()
	case StateBookService:
		return ServiceMenu()
	case StateBookMaster:
		return MastersMenu()
	case StateBookDate:
		return DateMenu()
	case StateBookTime:
		return TimeMenu()
	case StateBookConfirm:
		return ConfirmMenu()
	case StateMy:
		// –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
		)
	case StateHelp:
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CbBack)),
		)
	default:
		return MainMenu()
	}
}

func NewEditMessageCaptionAndMarkup(chatID int64, messageID int, caption string, replyMarkup tgbotapi.InlineKeyboardMarkup) (tgbotapi.EditMessageCaptionConfig, tgbotapi.EditMessageReplyMarkupConfig) {
	cap := tgbotapi.NewEditMessageCaption(chatID, messageID, caption)
	rep := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, replyMarkup)
	return cap, rep
}

func Title(s string) string {
	switch s {
	case "haircut":
		return "–°—Ç—Ä–∏–∂–∫–∞"
	case "shave":
		return "–ë—Ä–∏—Ç—å—ë"
	case "andrey":
		return "–ê–Ω–¥—Ä–µ–π"
	case "maria":
		return "–ú–∞—Ä–∏—è"
	}
	return s
}
